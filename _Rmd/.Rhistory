alpha=0.7,
fill=colors[5],
color=colors[5],
stroke=1.5,
pch=21,
size=8,
shape=21) +
geom_point(data=scc.toxics,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[4],
color=colors[4],
stroke=0,
pch=21,
size=4,
shape=21) +
ggtitle("Landscapes") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank()
)
map <- get_map(location="San Jose, CA",zoom=11)
ggmap(map) +
geom_polygon(data=openboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill=colors[1],
alpha=.7) +
geom_polygon(data=urbanboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill=colors[2],
alpha=0.6) +
geom_point(data=scc.superfunds,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[5],
color=colors[5],
stroke=1.5,
pch=21,
size=8,
shape=21) +
geom_point(data=scc.toxics,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[4],
color=colors[4],
stroke=0,
pch=21,
size=4,
shape=21) +
ggtitle("Landscapes") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank()
)
ggmap(map) +
geom_polygon(data=openboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill=colors[1],
alpha=.7) +
geom_polygon(data=urbanboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill=colors[2],
alpha=0.6) +
geom_point(data=scc.superfunds,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[5],
color=colors[5],
stroke=1.5,
pch=21,
size=8,
shape=21) +
geom_point(data=scc.toxics,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[4],
color=colors[4],
stroke=0,
pch=21,
size=4,
shape=21) +
ggtitle("Landscapes") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank()
)
map <- get_map(location="San Jose, CA",zoom=10)
ggmap(map) +
geom_polygon(data=openboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill=colors[1],
alpha=.7) +
geom_polygon(data=urbanboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill=colors[2],
alpha=0.6) +
geom_point(data=scc.superfunds,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[5],
color=colors[5],
stroke=1.5,
pch=21,
size=8,
shape=21) +
geom_point(data=scc.toxics,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[4],
color=colors[4],
stroke=0,
pch=21,
size=4,
shape=21) +
ggtitle("Landscapes") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank()
)
# maps
library("rgdal")
library("maptools")
library("ggplot2")
library("ggmap")
library("RColorBrewer")
library("ggthemes")
# data
library("tidyr")
library("plyr")
library("dplyr")
library("stringr")
library("car")
ggmap(map) +
geom_polygon(data=openboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill=colors[1],
alpha=.7) +
geom_polygon(data=urbanboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill=colors[2],
alpha=0.6) +
geom_point(data=scc.superfunds,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[5],
color=colors[5],
stroke=1.5,
pch=21,
size=8,
shape=21) +
geom_point(data=scc.toxics,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[4],
color=colors[4],
stroke=0,
pch=21,
size=4,
shape=21) +
ggtitle("Landscapes") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank()
)
ggmap(map) +
geom_polygon(data=openboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill=colors[1],
alpha=.7) +
geom_polygon(data=urbanboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill="gray",
alpha=0.6) +
geom_point(data=scc.superfunds,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[5],
color=colors[5],
stroke=1.5,
pch=21,
size=8,
shape=21) +
geom_point(data=scc.toxics,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[4],
color=colors[4],
stroke=0,
pch=21,
size=4,
shape=21) +
ggtitle("Landscapes") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank()
)
ggmap(map) +
geom_polygon(data=openboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill=colors[1],
alpha=.7) +
geom_polygon(data=urbanboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill="gray",
alpha=0.8) +
geom_point(data=scc.superfunds,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[5],
color=colors[5],
stroke=1.5,
pch=21,
size=8,
shape=21) +
geom_point(data=scc.toxics,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[4],
color=colors[4],
stroke=0,
pch=21,
size=4,
shape=21) +
ggtitle("Landscapes") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank()
)
# maps
library("rgdal")
library("maptools")
library("ggplot2")
library("ggmap")
library("RColorBrewer")
library("ggthemes")
# data
library("tidyr")
library("plyr")
library("dplyr")
library("stringr")
library("car")
ggmap(map) +
geom_polygon(data=openboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill=colors[1],
alpha=.7) +
geom_polygon(data=urbanboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill="gray",
alpha=0.8) +
geom_point(data=scc.superfunds,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[5],
color=colors[5],
stroke=1.5,
pch=21,
size=8,
shape=21) +
geom_point(data=scc.toxics,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[4],
color=colors[4],
stroke=0,
pch=21,
size=4,
shape=21) +
ggtitle("Landscapes") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank()
)
ggmap(map) +
geom_polygon(data=openboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill=colors[1],
alpha=.7) +
geom_polygon(data=urbanboundaries.df,
aes(x=long, y=lat, group=group),
size=.0,
fill=colors[2],
alpha=0.8) +
geom_point(data=scc.superfunds,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[5],
color=colors[5],
stroke=1.5,
pch=21,
size=8,
shape=21) +
geom_point(data=scc.toxics,
aes(x=longitude, y=latitude),
alpha=0.7,
fill=colors[4],
color=colors[4],
stroke=0,
pch=21,
size=4,
shape=21) +
ggtitle("Landscapes") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank()
)
ggsave("~/Desktop/sv-landscapes.png", dpi=300)
function(site.path='/Users/jasonheppler/Dropbox/github/quals/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
adf
""
}
KnitPost <- function(site.path='/Users/jasonheppler/Dropbox/github/quals/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "figures/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# dir = paste0("../_posts/", Sys.Date(), "-")
# output = paste0(dir, sub('.Rmd', '.md', filename))
# knit(filename, output)
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
KnitPost()
View(df)
site.path <- site.path # directory of jekyll blog (including trailing slash)
site.path="/Users/jasonheppler/Dropbox/github/quals/"
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "figures/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
View(files.rmd)
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
overwriteAll = F
overwriteOne = NULL
overwriteAll <- F
overwriteOne <- NULL
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
View(files.rmd)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
#message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
site.path="/Users/jasonheppler/Dropbox/github/quals/"
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "figures/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
overwriteAll <- F
overwriteOne <- NULL
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
View(files.rmd)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
View(files.rmd)
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
time_stamp = paste0(Sys.Date(), "-")
files.rmd$corresponding.md.file <- paste0(time_stamp, posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = time_stamp + files.rmd$rmd)))
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = paste0(time_stamp, files.rmd$rmd))))
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
print(files.rmd$corresponding.md.file)
files.rmd$corresponding.md.file <- paste0(posts.path, basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
print(files.rmd$corresponding.md.file)
files.rmd$corresponding.md.file <- paste0(posts.path, basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = paste0(time_stamp, files.rmd$rmd))))
print(files.rmd$corresponding.md.file)
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = paste0(time_stamp, files.rmd$rmd))))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
print(files.rmd$corresponding.md.file)
files.rmd$corresponding.md.file <- paste0(posts.path, time_stamp, basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
print(files.rmd$corresponding.md.file)
